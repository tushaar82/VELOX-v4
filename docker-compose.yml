version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: velox-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-velox_algotrading}
      POSTGRES_USER: ${DB_USER:-velox_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - velox-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-velox_user} -d ${DB_NAME:-velox_algotrading}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: velox-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - velox-network

  # Kafka Broker 1
  kafka-1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: velox-kafka-1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
    ports:
      - "9092:9092"
      - "9999:9999"
    volumes:
      - kafka_1_data:/var/lib/kafka/data
    networks:
      - velox-network

  # Kafka Broker 2
  kafka-2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: velox-kafka-2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9998
      KAFKA_JMX_HOSTNAME: localhost
    ports:
      - "9093:9093"
      - "9998:9998"
    volumes:
      - kafka_2_data:/var/lib/kafka/data
    networks:
      - velox-network

  # Kafka Broker 3
  kafka-3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: velox-kafka-3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
    ports:
      - "9094:9094"
      - "9997:9997"
    volumes:
      - kafka_3_data:/var/lib/kafka/data
    networks:
      - velox-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: velox-kafka-ui
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      KAFKA_CLUSTERS_0_NAME: velox-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:9092,kafka-2:9093,kafka-3:9094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - velox-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: velox-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - velox-network
    command: redis-server --appendonly yes

  # Market Data Processor Service
  market-data-processor:
    build:
      context: .
      dockerfile: docker/java-services/market-data-processor/Dockerfile
    container_name: velox-market-data-processor
    depends_on:
      postgres:
        condition: service_healthy
      kafka-1:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka-1:9092,kafka-2:9093,kafka-3:9094
      - REDIS_HOST=redis
    ports:
      - "${MARKET_DATA_PROCESSOR_PORT:-8081}:8081"
    networks:
      - velox-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Indicators Calculator Service
  indicators-calculator:
    build:
      context: .
      dockerfile: docker/java-services/indicators-calculator/Dockerfile
    container_name: velox-indicators-calculator
    depends_on:
      postgres:
        condition: service_healthy
      kafka-1:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka-1:9092,kafka-2:9093,kafka-3:9094
      - REDIS_HOST=redis
    ports:
      - "${INDICATORS_CALCULATOR_PORT:-8082}:8082"
    networks:
      - velox-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Risk Management Service
  risk-management:
    build:
      context: .
      dockerfile: docker/java-services/risk-management/Dockerfile
    container_name: velox-risk-management
    depends_on:
      postgres:
        condition: service_healthy
      kafka-1:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka-1:9092,kafka-2:9093,kafka-3:9094
      - REDIS_HOST=redis
    ports:
      - "${RISK_MANAGEMENT_PORT:-8083}:8083"
    networks:
      - velox-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: docker/api-gateway/Dockerfile
    container_name: velox-api-gateway
    depends_on:
      postgres:
        condition: service_healthy
      market-data-processor:
        condition: service_healthy
      indicators-calculator:
        condition: service_healthy
      risk-management:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-velox_user}:${DB_PASSWORD:-your_secure_password}@postgres:5432/${DB_NAME:-velox_algotrading}
      - KAFKA_BOOTSTRAP_SERVERS=kafka-1:9092,kafka-2:9093,kafka-3:9094
      - REDIS_URL=redis://redis:6379
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    networks:
      - velox-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: velox-frontend
    depends_on:
      - api-gateway
    environment:
      - REACT_APP_API_URL=http://localhost:${API_GATEWAY_PORT:-8000}
      - REACT_APP_WS_URL=ws://localhost:${API_GATEWAY_PORT:-8000}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - velox-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: velox-nginx
    depends_on:
      - api-gateway
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - velox-network

volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_1_data:
  kafka_2_data:
  kafka_3_data:
  redis_data:

networks:
  velox-network:
    driver: bridge